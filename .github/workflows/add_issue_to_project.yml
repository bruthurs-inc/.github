name: Map Issue Fields to Project
on:
  issues:
    types: [opened]

jobs:
  update-project-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Fields & Update Project
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT }}
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          ISSUE_ID="${{ github.event.issue.node_id }}"  # Use node_id for GraphQL

          # Extract values using awk (handles multiline better)
          PRIORITY=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Priority/ {getline; print}')
          EFFORT=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Level of Effort/ {getline; print}')
          DUE_DATE=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Due Date/ {getline; print}')
          
          # Debugging Output (for testing)
          echo "Extracted Priority: $PRIORITY"
          echo "Extracted Effort: $EFFORT"
          echo "Extracted Due Date: $DUE_DATE"
          echo "DEBUG: ISSUE_ID=$ISSUE_ID"

          # Fail if any required value is empty
          if [[ -z "$PRIORITY" || -z "$EFFORT" || -z "$DUE_DATE" ]]; then
            echo "Error: One or more extracted values are empty."
            exit 1
          fi

          # Optional: Sleep to avoid timing issues
          # sleep 5  # Give GitHub time to attach the issue to the project

          # Fetch the Project Item ID directly from the Issue
          PROJECT_ID="PVT_kwDOBfaOE84ATF4c"
          ITEM_ID=$(gh api graphql -F issueId="$ISSUE_ID" -f query='
            query ($issueId: ID!) {
              node(id: $issueId) {
                ... on Issue {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        id
                      }
                    }
                  }
                }
              }
            }' --jq '.data.node.projectItems.nodes[] | select(.project.id == "'"$PROJECT_ID"'") | .id')

          # Debugging Output
          echo "DEBUG: ITEM_ID=$ITEM_ID"

          # Check if ITEM_ID is found
          if [[ -z "$ITEM_ID" ]]; then
            echo "Error: Unable to find project item for issue."
            exit 1
          fi

          # Update project fields via GraphQL
          gh api graphql -F itemId="$ITEM_ID" -F projectId="$PROJECT_ID" -f query='
            mutation ($itemId: ID!, $projectId: ID!) {
              updatePriority: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJPM",
                  value: { text: "'"$PRIORITY"'" }
                }
              ) { clientMutationId }
              
              updateEffort: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJSo",
                  value: { text: "'"$EFFORT"'" }
                }
              ) { clientMutationId }
              
              updateDueDate: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTF_lADOBfaOE84ATF4czgpFJGw",
                  value: { text: "'"$DUE_DATE"'" }
                }
              ) { clientMutationId }
            }'
