name: Map Issue Fields to Project
on:
  issues:
    types: [opened]

jobs:
  update-project-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Fields & Update Project
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT }}
        run: |
          set -e  # Exit immediately if a command fails

          echo "Extracting issue fields..."
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "Issue Body: $ISSUE_BODY"

          # Extract values using awk
          PRIORITY=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Priority/ {getline; print}' | xargs)
          EFFORT=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Level of Effort/ {getline; print}' | xargs)
          DUE_DATE=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Due Date/ {getline; print}')

          echo "Extracted Priority: '$PRIORITY'"
          echo "Extracted Effort: '$EFFORT'"
          echo "Extracted Due Date: '$DUE_DATE'"

          # Fetch project fields
          echo "Fetching project fields..."
          PROJECT_FIELDS=$(gh api graphql -F projectId="PVT_kwDOBfaOE84ATF4c" -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 100) {
                  nodes {
                    __typename
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                    ... on ProjectV2IterationField {
                      id
                      name
                      configuration {
                        iterations {
                          id
                          title
                        }
                      }
                    }
                    ... on ProjectV2Field {
                      id
                      name
                      dataType
                    }
                  }
                }
              }
            }
          }')

          echo "Received Project Fields JSON:"
          echo "$PROJECT_FIELDS" | jq .

          # Extract field options
          echo "Available Priority Options:"
          echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Priority") | .options[] | .name'

          echo "Available Effort Options:"
          echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Level of Effort") | .options[] | .name'

          PRIORITY_OPTION_ID=$(echo "$PROJECT_FIELDS" | jq -r --arg priority "$(echo "$PRIORITY" | awk '{print $1}')" '
            .data.node.fields.nodes[] | select(.name == "Priority") | .options[] |
            select(.name == $priority) | .id')
          
          EFFORT_OPTION_ID=$(echo "$PROJECT_FIELDS" | jq -r --arg effort "$(echo "$EFFORT" | awk '{print $1}')" '
            .data.node.fields.nodes[] | select(.name == "Level of Effort") | .options[] |
            select(.name == $effort) | .id')

          echo "Priority Option ID: '$PRIORITY_OPTION_ID'"
          echo "Effort Option ID: '$EFFORT_OPTION_ID'"

          # Convert Due Date to ISO 8601 format
          echo "Converting due date..."
          if [[ -n "$DUE_DATE" ]]; then
            DUE_DATE_ISO=$(date -d "$DUE_DATE" --iso-8601=seconds || echo "")
          else
            DUE_DATE_ISO=""
          fi

          echo "Due Date (ISO): '$DUE_DATE_ISO'"

          # Retry fetching project item ID if not found initially
          MAX_RETRIES=5
          RETRY_DELAY=3  # seconds
          ITEM_ID=""

          ISSUE_NODE_ID="${{ github.event.issue.node_id }}"
          echo "Issue Node ID: '$ISSUE_NODE_ID'"

          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Fetching project item ID for Issue Node ID: '$ISSUE_NODE_ID' (Attempt $i)..."
            ITEM_ID=$(gh api graphql -F projectId="PVT_kwDOBfaOE84ATF4c" -F issueNodeId="${ISSUE_NODE_ID}" -f query='
              query($projectId: ID!, $issueNodeId: ID!) {
                node(id: $issueNodeId) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }' --jq '.data.node.projectItems.nodes[] | select(.project.id == "PVT_kwDOBfaOE84ATF4c") | .id')

            if [[ -n "$ITEM_ID" ]]; then
              break
            fi

            echo "Project item not found, retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          done

          if [[ -z "$ITEM_ID" ]]; then
            echo "Error: Could not retrieve project item ID."
            exit 1
          fi

          echo "Extracted Project Item ID: '$ITEM_ID'"

          # Check if required values are empty
          if [[ -z "$PRIORITY_OPTION_ID" || -z "$EFFORT_OPTION_ID" || -z "$DUE_DATE_ISO" || -z "$ITEM_ID" ]]; then
            echo "Error: One or more required values are empty."
            exit 1
          fi

          # Update project fields
          echo "Updating project fields..."
          gh api graphql -F itemId="$ITEM_ID" -F projectId="PVT_kwDOBfaOE84ATF4c" -f query='
            mutation ($itemId: ID!, $projectId: ID!) {
              updatePriority: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJPM",
                  value: { singleSelectOptionId: "'"$PRIORITY_OPTION_ID"'" }
                }
              ) { clientMutationId }

              updateEffort
          ::contentReference[oaicite:1]{index=1}
 
