name: Map Issue Fields to Project
on:
  issues:
    types: [opened]

jobs:
  update-project-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Fields & Update Project
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT }}
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          PROJECT_ID="PVT_kwDOBfaOE84ATF4c"
          
          # Extract values using awk (handles multiline better)
          PRIORITY=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Priority/ {getline; print}')
          EFFORT=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Level of Effort/ {getline; print}')
          DUE_DATE=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Due Date/ {getline; print}')
          
          # Debugging Output (for testing)
          echo "Extracted Priority: $PRIORITY"
          echo "Extracted Effort: $EFFORT"
          echo "Extracted Due Date: $DUE_DATE"
          
          # Fetch project field options for Priority
          PRIORITY_OPTIONS=$(gh api graphql -F projectId="$PROJECT_ID" -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 100) {
                    nodes {
                      id
                      name
                      singleSelectOptions(first: 100) {
                        nodes {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' --jq '.data.node.fields.nodes[] | select(.name == "Priority") | .singleSelectOptions.nodes')
          
          # Fetch project field options for Level of Effort
          EFFORT_OPTIONS=$(gh api graphql -F projectId="$PROJECT_ID" -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 100) {
                    nodes {
                      id
                      name
                      singleSelectOptions(first: 100) {
                        nodes {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' --jq '.data.node.fields.nodes[] | select(.name == "Level of Effort") | .singleSelectOptions.nodes')
          
          # Fuzzy match: Extract the simplified option name for Priority
          PRIORITY_ID=$(echo "$PRIORITY_OPTIONS" | jq -r --arg PRIORITY "$PRIORITY" '.[] | select(.name | test($PRIORITY; "i")) | .id')
          
          # Fuzzy match: Extract the simplified option name for Effort
          EFFORT_ID=$(echo "$EFFORT_OPTIONS" | jq -r --arg EFFORT "$EFFORT" '.[] | select(.name | test($EFFORT; "i")) | .id')
          
          # Check if matching values were found
          if [[ -z "$PRIORITY_ID" || -z "$EFFORT_ID" ]]; then
            echo "Error: Could not find matching options for Priority or Effort."
            exit 1
          fi
          
          # Update the Priority field (Mutation 1)
          gh api graphql -F itemId="$ITEM_ID" -F projectId="$PROJECT_ID" -F priorityId="$PRIORITY_ID" -f query='
            mutation ($itemId: ID!, $projectId: ID!, $priorityId: ID!) {
              updateProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJPM", value: {singleSelectOptionId: $priorityId}}) { clientMutationId }
            }'
          
          # Update the Effort field (Mutation 2)
          gh api graphql -F itemId="$ITEM_ID" -F projectId="$PROJECT_ID" -F effortId="$EFFORT_ID" -f query='
            mutation ($itemId: ID!, $projectId: ID!, $effortId: ID!) {
              updateProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJSo", value: {singleSelectOptionId: $effortId}}) { clientMutationId }
            }'
          
          # Update the Due Date field (Mutation 3)
          gh api graphql -F itemId="$ITEM_ID" -F projectId="$PROJECT_ID" -F dueDate="$DUE_DATE" -f query='
            mutation ($itemId: ID!, $projectId: ID!, $dueDate: String!) {
              updateProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: "PVTF_lADOBfaOE84ATF4czgpFJGw", value: {date: $dueDate}}) { clientMutationId }
            }'
