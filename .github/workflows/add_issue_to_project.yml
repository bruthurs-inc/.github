name: Map Issue Fields to Project
on:
  issues:
    types: [opened]

jobs:
  update-project-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Fields & Update Project
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT }}
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract values using awk
          PRIORITY=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Priority/ {getline; print}')
          EFFORT=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Level of Effort/ {getline; print}')
          DUE_DATE=$(echo "$ISSUE_BODY" | awk -v RS='' '/### Due Date/ {getline; print}')

          echo "Extracted Priority: $PRIORITY"
          echo "Extracted Effort: $EFFORT"
          echo "Extracted Due Date: $DUE_DATE"

          # Fetch project fields and available single select options
          PROJECT_FIELDS=$(gh api graphql -F projectId="PVT_kwDOBfaOE84ATF4c" -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 100) {
                    nodes {
                      id
                      name
                      dataType
                      ... on ProjectV2SingleSelectField {
                        singleSelectOptions(first: 100) {
                          nodes {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }')

          # Extract available options for fuzzy matching
          PRIORITY_OPTIONS=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Priority" and .dataType == "SINGLE_SELECT") | .singleSelectOptions.nodes[] | "\(.id) \(.name)"')
          EFFORT_OPTIONS=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Effort" and .dataType == "SINGLE_SELECT") | .singleSelectOptions.nodes[] | "\(.id) \(.name)"')

          # Fuzzy match function (picks the best match by checking for a substring)
          fuzzy_match() {
            INPUT_TEXT="$1"
            OPTIONS="$2"

            MATCHED_ID=""
            while IFS= read -r LINE; do
              OPTION_ID=$(echo "$LINE" | awk '{print $1}')
              OPTION_NAME=$(echo "$LINE" | awk '{print substr($0, index($0,$2))}')

              if [[ "$INPUT_TEXT" == *"$OPTION_NAME"* ]]; then
                MATCHED_ID="$OPTION_ID"
                break
              fi
            done <<< "$OPTIONS"

            echo "$MATCHED_ID"
          }

          # Get fuzzy matched option IDs
          PRIORITY_OPTION_ID=$(fuzzy_match "$PRIORITY" "$PRIORITY_OPTIONS")
          EFFORT_OPTION_ID=$(fuzzy_match "$EFFORT" "$EFFORT_OPTIONS")

          # Convert Due Date to ISO 8601 format
          if [[ -n "$DUE_DATE" ]]; then
            DUE_DATE_ISO=$(date -d "$DUE_DATE" --iso-8601=seconds 2>/dev/null || date -j -f "%Y-%m-%d" "$DUE_DATE" "+%Y-%m-%dT%H:%M:%SZ")
          fi

          echo "Matched Priority Option ID: $PRIORITY_OPTION_ID"
          echo "Matched Effort Option ID: $EFFORT_OPTION_ID"
          echo "Due Date (ISO): $DUE_DATE_ISO"

          if [[ -z "$PRIORITY_OPTION_ID" || -z "$EFFORT_OPTION_ID" || -z "$DUE_DATE_ISO" ]]; then
            echo "Error: One or more required values are empty."
            exit 1
          fi

          # Get issue item ID in the project
          ITEM_ID=$(gh api graphql -F projectId="PVT_kwDOBfaOE84ATF4c" -F issueId="${{ github.event.issue.node_id }}" -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' --jq '.data.node.items.nodes[] | select(.content.id == "'"${{ github.event.issue.node_id }}"'") | .id')

          if [[ -z "$ITEM_ID" ]]; then
            echo "Error: Could not determine the item ID for this issue."
            exit 1
          fi

          # Update the project fields
          gh api graphql -F itemId="$ITEM_ID" -F projectId="PVT_kwDOBfaOE84ATF4c" -f query='
            mutation ($itemId: ID!, $projectId: ID!) {
              updatePriority: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJPM",
                  value: { singleSelectOptionId: "'"$PRIORITY_OPTION_ID"'" }
                }
              ) { clientMutationId }

              updateEffort: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTSSF_lADOBfaOE84ATF4czgpFJSo",
                  value: { singleSelectOptionId: "'"$EFFORT_OPTION_ID"'" }
                }
              ) { clientMutationId }

              updateDueDate: updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: "PVTF_lADOBfaOE84ATF4czgpFJGw",
                  value: { date: "'"$DUE_DATE_ISO"'" }
                }
              ) { clientMutationId }
            }'
