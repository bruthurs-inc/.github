name: Map Issue Fields to Project
on:
  issues:
    types: [opened]

jobs:
  update-project-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Fields & Update Project
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT }}
        run: |
          set -e  # Exit on error

          echo "Extracting issue fields..."
          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract values using sed for robustness
          PRIORITY=$(echo "$ISSUE_BODY" | sed -n '/### Priority/{n;p;}' | xargs)
          EFFORT=$(echo "$ISSUE_BODY" | sed -n '/### Level of Effort/{n;p;}' | xargs)
          DUE_DATE=$(echo "$ISSUE_BODY" | sed -n '/### Due Date/{n;p;}')

          echo "Extracted Priority: '$PRIORITY'"
          echo "Extracted Effort: '$EFFORT'"
          echo "Extracted Due Date: '$DUE_DATE'"

          # Fetch project fields
          echo "Fetching project fields..."
          PROJECT_FIELDS=$(gh api graphql -f query='
          query {
            node(id: "PVT_kwDOBfaOE84ATF4c") {
              ... on ProjectV2 {
                fields(first: 100) {
                  nodes {
                    id
                    name
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }')

          echo "Received Project Fields JSON:"
          echo "$PROJECT_FIELDS" | jq .

          # Extract field IDs
          PRIORITY_FIELD_ID=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Priority") | .id')
          EFFORT_FIELD_ID=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Level of Effort") | .id')
          DUE_DATE_FIELD_ID=$(echo "$PROJECT_FIELDS" | jq -r '.data.node.fields.nodes[] | select(.name == "Due Date") | .id')

          # Extract field option IDs
          PRIORITY_OPTION_ID=$(echo "$PROJECT_FIELDS" | jq -r --arg priority "$PRIORITY" '
            .data.node.fields.nodes[] | select(.name == "Priority") | .options[] |
            select(.name == $priority) | .id')

          EFFORT_OPTION_ID=$(echo "$PROJECT_FIELDS" | jq -r --arg effort "$EFFORT" '
            .data.node.fields.nodes[] | select(.name == "Level of Effort") | .options[] |
            select(.name == $effort) | .id')

          echo "Priority Option ID: '$PRIORITY_OPTION_ID'"
          echo "Effort Option ID: '$EFFORT_OPTION_ID'"

          # Convert Due Date to ISO 8601 format safely
          if [[ -n "$DUE_DATE" ]]; then
            DUE_DATE_ISO=$(date -u -d "$DUE_DATE" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || echo "")
          else
            DUE_DATE_ISO=""
          fi
          echo "Due Date (ISO): '$DUE_DATE_ISO'"

          # Fetch project item ID by matching issue node ID
          ISSUE_NODE_ID="${{ github.event.issue.node_id }}"
          ITEM_ID=$(echo "$PROJECT_FIELDS" | jq -r --arg issueId "$ISSUE_NODE_ID" '
            .data.node.items.nodes[] | select(.content.id == $issueId) | .id')

          if [[ -z "$ITEM_ID" ]]; then
            echo "Error: Could not retrieve project item ID."
            exit 1
          fi

          echo "Extracted Project Item ID: '$ITEM_ID'"

          # Ensure required values exist before updating
          if [[ -z "$PRIORITY_OPTION_ID" || -z "$EFFORT_OPTION_ID" || -z "$DUE_DATE_ISO" || -z "$ITEM_ID" ]]; then
            echo "Error: One or more required values are empty."
            exit 1
          fi

          # Perform batch update using a single mutation
          echo "Updating project fields..."
          gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $updates: [ProjectV2ItemFieldValueUpdate!]!) {
            updateProjectV2ItemFieldValues(input: { projectId: $projectId, itemId: $itemId, updates: $updates }) {
              clientMutationId
            }
          }' -f projectId="PVT_kwDOBfaOE84ATF4c" -f itemId="$ITEM_ID" -f updates="$(jq -n \
            --arg priorityField "$PRIORITY_FIELD_ID" --arg priorityValue "$PRIORITY_OPTION_ID" \
            --arg effortField "$EFFORT_FIELD_ID" --arg effortValue "$EFFORT_OPTION_ID" \
            --arg dueDateField "$DUE_DATE_FIELD_ID" --arg dueDateValue "$DUE_DATE_ISO" \
            '[{fieldId: $priorityField, value: {singleSelectOptionId: $priorityValue}}, 
              {fieldId: $effortField, value: {singleSelectOptionId: $effortValue}}, 
              {fieldId: $dueDateField, value: {date: $dueDateValue}}]')"
